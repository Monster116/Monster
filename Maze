"""
@author: Maggie Zhang
@contact: mengdie_zhang@whu.edu.cn
@file: Maze.py
@time: 7/30/18
"""


def Maze () :
    import numpy as np

    def MazeCreate ( road_rows , road_cols ) :
        Render_rows = 2 * road_rows + 1
        Render_cols = 2 * road_cols + 1
        Maze = [ [ "[W]" for i in range ( Render_rows ) ] for j in range ( Render_cols ) ]
        M = np.array ( Maze ).T
        for i in range ( 0 , road_rows ) :
            for j in range ( 0 , road_cols ) :
                M [ 2 * i + 1 , 2 * j + 1 ] = "[R]"
        return M

    def transfer ( old_point ) :
        new_point = [ ]
        for i in range ( 0 , 2 ) :
            new_p = 2 * old_point [ i ] + 1
            new_point.append ( new_p )
        return new_point

    # 输入的第一行：道路网格的维度
    command = input ( "" )
    # 输入的第二行:  道路网格的连通性定义
    list_index = input ( "" )
    whether_error = 0  # 0表示正确，1表示错误
    # 对第一行，判断是否出现 1--'无效的数字' or  3--'格式错误'
    Road_index = command.split ( ' ' )
    if len ( Road_index ) != 2 :
        print ( 'Incorrect command format' )  # 3--格式错误
        whether_error = 1
    else :
        for i in range ( 0 , 2 ) :  # 对每个元素，看看是否能转化为 整型
            try :
                int ( Road_index [ i ] )
            except :
                print ( 'Invalid number format' )  # 1--无效的数字
                whether_error = 1
                break
    # 如果第一行都报错了，无需判断第二行
    if whether_error == 0 :
        # 对第二行，判断是否出现 1--'无效的数字' or  3--'格式错误'
        l = list_index.split ( ';' )
        for d in l :  # 实例说明 d   '0,1  0,2'
            d2 = d.split ( ' ' )  # 实例说明 d2=[ '0,1' , '0,2' ]
            if len ( d2 ) != 2 :
                print ( 'Incorrect command format.' )  # 3--格式错误
                whether_error = 1
                break
            else :
                for d3 in d2 :  # 实例说明 d3='0,1'
                    d4 = d3.split ( ',' )  # 实例说明 d4=['0','1']
                    if len ( d4 ) != 2 :
                        print ( 'Incorrect command format.' )  # 3--格式错误
                        whether_error = 1
                        break
                    else :
                        for i in range ( 0 , 2 ) :
                            try :
                                int ( d4 [ i ] )
                            except :
                                print ( 'Invalid number format' )  # 1--无效的数字
                                whether_error = 1
                                break

    ######################## 下面是在不会出现1，3错误情况下运行的， 用whether_error控制
    whether_error2 = 0  # 保证2，4错误，不输出矩阵 0表示没错，1表示错误

    if whether_error == 0 :
        road_rows = int ( Road_index [ 0 ] )
        road_cols = int ( Road_index [ 1 ] )
        M = MazeCreate ( road_rows , road_cols )
        l = list_index.split ( ';' )  # 两个联通的点
        for points in range ( 0 , len ( l ) ) :
            point = l [ points ].split ( ' ' )  # 将两个联通的点放在一个列表里
            new_points = [ ]
            for p in point :
                old_point_str = p.split ( ',' )  # 将一个点的坐标放在一个列表里['0','1']
                old_point = [ int ( i ) for i in old_point_str ]
                new_point = transfer ( old_point )
                new_points.append ( new_point )
            x = new_points [ 0 ]
            y = new_points [ 1 ]
            if (x [ 0 ] in range ( 1 , M.shape [ 0 ] - 1 )) & (y [ 0 ] in range ( 1 , M.shape [ 0 ] - 1 )) & (
                    x [ 1 ] in range ( 1 , M.shape [ 1 ] - 1 )) & (y [ 1 ] in range ( 1 , M.shape [ 1 ] - 1 )) :
                if x [ 0 ] == y [ 0 ] :
                    if abs ( x [ 1 ] - y [ 1 ] ) == 2 :
                        M [ x [ 0 ] , min ( x [ 1 ] , y [ 1 ] ) + 1 ] = '[R]'
                elif x [ 1 ] == y [ 1 ] :
                    if abs ( x [ 0 ] - y [ 0 ] ) == 2 :
                        M [ min ( x [ 0 ] , y [ 0 ] ) + 1 , x [ 1 ] ] = '[R]'
                else :
                    print ( 'Mazeformat error.' )  #4--连通性错误
                    whether_error2 = 1
                    break
            else :
                print ( 'Number out of range.' )  #2--数字超出预定范围
                whether_error2 = 1
                break

        if whether_error2 == 0 :
            M_str = str ( M ).replace ( '\'' , '' ).replace ( '[[[' , '[' ).replace ( ' [[' , '[' ).replace ( ']]]' ,
                                                                                                              ']' ).replace (
                ']]' , ']' )
            print ( M_str )


Maze ()
